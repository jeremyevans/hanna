<%
values = values[:values] if values[:values]
entry = values[:entry]
sections = values[:sections].keys if values.has_key?(:sections)
methods = entry.method_list + entry.attributes
unless methods.empty? %><div id='method-list'>
<h2>Methods</h2>
<% %w[attr attr_accessor attr_reader attr_writer class instance].each do |type|
    (RDoc::VISIBILITIES rescue RDoc::Context::VISIBILITIES).each do |vis|
      list = methods.reject { |x| x.respond_to?(:is_alias_for) && x.is_alias_for }.select { |x| x.visibility == vis && x.type == type.to_s }.sort
      next if list.empty?
      type_result = ""
      if type =~ /^attr_/
        type_result += type.sub(/^attr_/, '').capitalize
      else
        type_result += type.capitalize
      end
      type_result = "#{vis.to_s.capitalize} #{type_result}"
%><h3><%=h type_result %></h3>
<ol>
<%
      list.each do |method|
        if method.respond_to?(:aref)
          if method.name.to_s.empty? && method.call_seq %><li><%= link_to(method.call_seq.gsub(/<br\s*\/?>/, "").split(/[\r\n]+/).map{ |s| s.split(/([({]+|\[\{|\s+(#?=>|&rarr;)\s+)/).first.sub(/^[A-Za-z0-9_:]+\./, "").sub(/\s+=\s+.*/, "=").strip }.uniq.join("<br />\n"), '#' + method.aref) %></li>
<%        else %><li><%= link_to(method.name, '#' + method.aref) %></li>
<%        end
        elsif method.respond_to?(:html_name) %><li><%= link_to(method.name, "#method-#{method.html_name}") %></li>
<%      else %><li><%=h method.name %></li>
<%      end
      end %></ol>
<%  end
  end %></div>
<%
end
if entry.requires or sections or entry.includes %><div id='context'>
<% unless entry.requires.empty? %><div id='requires'>
<h2>Required files</h2>
<ol>
<% entry.requires.each do |req| %><li><%=h req.name %></li>
<% end %></ol>
</div>
<% end
   if sections && (sections.length > 1 || sections.first.title.to_s != '')
%><div id='contents'>
<h2>Contents</h2>
<ol>
<% sections.sort_by{|s| s.title.to_s}.each do |section| %><li><%= link_to(section.title, "##{section.aref}") %></li>
<% end %></ol>
</div>
<% end
   unless entry.includes.empty?
%><div id='includes'>
<h2>Included modules</h2>
<ol>
<% entry.includes.each do |inc| %><li><%= (mod = inc.module).is_a?(String) ? h(inc.name) : link_to(inc.name, entry.aref_to(mod.path)) %></li>
<% end %></ol>
</div>
<% end %></div><% end %>
